{"name":"JGit4MATLAB","tagline":"JGit wrapper for MATLAB","body":"JGit4MATLAB\r\n===========\r\nJGit4MATLAB is a wrapper for JGit in MATLAB. It is meant to be used from the\r\ncommand line.\r\n\r\nInstallation\r\n============\r\nDownload the full zip-file from [MATLAB Central File Exchange]\r\n(http://www.mathworks.com/matlabcentral/fileexchange/), extract to your working\r\nMATLAB folder, usually `C:\\Users\\<username>\\Documents\\MATLAB` and type `JGit`.\r\nThis will download the latest version of JGit and edit your Java class path file\r\ncalled `javaclasspath.txt` that is also in your MATLAB working folder, making a\r\ncopy called `javaclasspath.txt.JGitSaved` of `javaclasspath.txt` if it already exists.\r\n\r\nAfter this you must restart MATLAB for the changes to your MATLAB Java static\r\nclass path to take effect.\r\n\r\nUsage\r\n=====\r\nIn general usage is the same as in [Git](http://git-scm.com/docs/git-help) and\r\n[`org.eclipse.jgit.api.Git`](http://download.eclipse.org/jgit/docs/latest/apidocs/).\r\n\r\nAdd\r\n---\r\nStage files to git repo.\r\n\r\n    JGit.add('file')\r\n    JGit.add({'list','of','files'})\r\n\r\nCommit\r\n------\r\nCommit files to git repo. Any combination of commands will work. If `getenv('EDITOR')`\r\nis empty then `notepad` is used. An empty commit message throws a Java JGit exception.\r\n\r\n    JGit.commit\r\n    JGit.commit('all',true)\r\n    JGit.commit('message','your commit message')\r\n    JGit.commit('amend',true)\r\n    JGit.commit('author',{'name','email'})\r\n    JGit.commit('committer',{'name','email'})\r\n\r\nLog\r\n------\r\nReturn commit log. Any combination of commands will work. Commits are entered as strings which can be SHA1 of the commit, HEAD~N, where N is the number of commits from HEAD or as refs/heads/branch, where branch is the branch of the commit. You can use 'since' and 'until' independently or together. 'Since' shows commits newer than a given commit, and 'until' shows older commits. Commits are always shown from newest to oldest. Push the enter key to advance and q+enter to quit.\r\n\r\n    JGit.log\r\n    JGit.log('maxCount',number_of_commits_to_show)\r\n    JGit.log('since','commit_to_start')\r\n    JGit.log('until','commit_to_stop')\r\n    JGit.log('skip',number_of_commits_to_skip)\r\n\r\nStatus\r\n------\r\nReturn status of git repo. Staged files are links which will open them in the MATLAB editor.\r\n\r\n    JGit.status\r\n\r\nOther\r\n-----\r\nCreate an `org.eclipse.jgit.api.Git` instance. With this you can do almost\r\nanything. EG: `git.reset.setRef('HEAD').addPath('JGit.m').call` will unstage the\r\nfile `JGit.m` from the current commit.\r\n\r\n    git = JGit.getGitAPI\r\n\r\nTODO\r\n====\r\nThere are many porcelain functions that would be quick to implement: `help`, `init`, `clone`,`reset`, `push`, `pull`, etc. All functions should call the getGitAPI class function. Then they can use that instance to do whatever. For other methods, use the appropriate org.eclipse.jgit package directly.\r\n\r\nA GUI to mimic gitk and git-gui. GUI options for some porcelain commands like log might also be nice. A log GUI that shows a banch graph would be especially nice.\r\n\r\nContributions are welcome. Please make fork and send me your pull requests. I will add your name to the AUTHOR list to credit you for your contribution.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}